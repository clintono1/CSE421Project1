			+--------------------+
			|       CSE 421      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

Clinton Oka <clintono@buffalo.edu>
Terrell Green <terrellg@buffalo.edu>
Nathan Hall <nathanha@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

//Project summary
http://courses.cs.vt.edu/~cs3204/spring2008/pintos/Project1Session.pdf

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//Need to define a struct that will wake up the current thread, and refrence the queue of threads.
//Need to define a list or queue to hold threads in waiting.

//In thread:
int64_t sleepCount;
//Count ticks of sleeping threads

//In timer:
struct list sleepingList;
//List of the threads that are sleeping

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
//In sleep:
-Check ticks > 0
-Disable interrupts
-Set sleepCount to how long thread will sleep for
-Add thread to sleepingList
-Block thread
-Enable interrupts

//In interrupt handler:
-Check the sleepCount of each element in sleepingList for elements where sleepCount <= the global ticks amount
  -Disable interrupts
  -For those that are, set sleepCount to 0, remove from sleepingList and unblock
-Loop this as long as there are applicable elements (speepCount <= global ticks)
-Enable interrupts


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
By ensuring sleepingList is in order, it keeps from having to search the entire list every time. 
Instead it can go in order to where it should be.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
sleepingList is only modified when interrupts are disabled, to prevent issues in simultaneous calls to timer_sleep()


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
Interrupts are turned off when sleepCount is being modified

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
This implementation is a slight adaptation of my original draft when looking at this project. 
Minor adjustments to functionality have been made to improve performance and readibility. 
For example sorting the sleepingList, to improve performance, rather than letting it go out of order. 
Originally, it hadn't been a concern, but question A3 reminded me that effeciency is a concern.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//We need to Create a struct of type thread that has a list.
//we need to be able to control the priority "lock" and "unlock" members of the list
--thread.h--
	int eff_priority;
	struct lock * lock_to_acquire		
	struct list locks_waited_by_others;
//Need to sync elements,
--sync.h--
	struct list_elem thread_elem; //list elements for waited lock queue

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)


   T1     T2 T3     T4
    \     /   \     /
     \   /     \   /
      \ /       \ /    - T1 and T2 are waiting on L1
       L1        L2    - T2 and T3 are waiting on L2
       |         |   
       T5        T6    -L1 is held by T5, L2 by T6
        \        /
         \      /
          \    /
           \  /
            L3         - T5 and T6 are waiting on L3
            |
            T7         - L3 is held by T7

Using a forest type mechanism, we plan to use eff_priority to track priority donation. 
Using whatever information is provided the data structure should produce the correct priority.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We plan to do this by searching for the thread with the highest effective priority 
on wake up.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

In lock_acquire(), if a thread is waiting we check the priority vs the 
effective priority of the lock holder. Then we set the current thread to the higher priority, 
and recursively climb the tree. 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

this method will remove the lock from the list of locks and 
force the list priority to be recalculated. Which should only
take max amount of the threads original priority.
Then the lock will be released.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
